name: Build and Update Version

on:
  push:
    branches:
      - main  

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install custom JAR lib-utils
        run: |
          mvn install:install-file \
            -Dfile=./local-dependencies/Lib-Utils-1.1.3.jar \
            -DgroupId=com.georgejrdev \
            -DartifactId=lib-utils \
            -Dversion=1.1.3 \
            -Dpackaging=jar

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17' 
          distribution: 'temurin'

      - name: Install FFmpeg
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg

      - name: Update VERSION in SuperToolKit.java
        run: |
          version=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          sed -i "s/static private final String VERSION = \".*\";/static private final String VERSION = \"$version\";/g" src/main/java/com/georgejrdev/SuperToolKit.java

      - name: Build with Maven
        run: mvn clean package
        env:
          STK_GEMINI_API_KEY: ${{ secrets.STK_GEMINI_API_KEY }}

      - name: Extract Version from POM
        id: extract_version
        run: |
          version=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "Project version: $version"
          echo "version=$version" >> $GITHUB_ENV

      - name: Rename JAR to SuperToolKit.jar
        run: |
          mv target/*-with-dependencies.jar SuperToolKit.jar
          echo "Renamed JAR to: SuperToolKit.jar"

      - name: Create linux<version> directory and copy files
        run: |
          dir_name="linux${{ env.version }}"
          mkdir $dir_name
          cp SuperToolKit.jar $dir_name/
          cp ./scripts/install.sh $dir_name/
          cp ./scripts/stk.sh $dir_name/
          echo "Copied JAR and scripts to $dir_name"

      - name: Compress linux<version> to ZIP
        run: |
          dir_name="linux${{ env.version }}"
          zip -r "${dir_name}.zip" $dir_name
          echo "Compressed $dir_name to ${dir_name}.zip"

      - name: Create build directory
        run: mkdir -p ./build

      - name: Move Linux ZIP to build directory
        run: |
          mv linux${{ env.version }}.zip ./build/
          echo "Moved linux${{ env.version }}.zip to ./build/"

      - name: Create windows<version> directory and copy files
        run: |
          dir_name="windows${{ env.version }}"
          mkdir $dir_name
          cp SuperToolKit.jar $dir_name/
          cp ./scripts/install.bat $dir_name/
          cp ./scripts/stk.bat $dir_name/
          echo "Copied JAR and scripts to $dir_name"

      - name: Compress windows<version> to ZIP
        run: |
          dir_name="windows${{ env.version }}"
          zip -r "${dir_name}.zip" $dir_name
          echo "Compressed $dir_name to ${dir_name}.zip"

      - name: Move Windows ZIP to build directory
        run: |
          mv windows${{ env.version }}.zip ./build/
          echo "Moved windows${{ env.version }}.zip to ./build/"

      - name: Cleanup Temporary Files
        run: |
          rm -rf linux* windows* SuperToolKit.jar

      - name: Update README.md with new version
        run: |
          sed -i "s/[0-9]\+\.[0-9]\+\.[0-9]\+/${{ env.version }}/g" README.md
          sed -i "s/SuperToolKit-[0-9]\+\.[0-9]\+\.[0-9]\+\.jar/SuperToolKit.jar/g" README.md

      - name: Commit and push changes
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          if [ -n "$(git status --porcelain)" ]; then
            git add README.md build/
            git commit -m "Build - version: ${{ env.version }}"
            git push
          else
            echo "No changes to commit."
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  release:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write
      pull-requests: write
      repository-projects: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1.1.4
        env: 
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "v${{ env.version }}"
          release_name: "Release v${{ env.version }}"
          body: "Release version v${{ env.version }}"
          draft: false
          prerelease: false

      - name: Upload linux release asset
        uses: actions/upload-release-asset@v1
        env: 
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build/linux${{ env.version }}.zip
          asset_name: linux${{ env.version }}.zip
          asset_content_type: application/zip

      - name: Upload windows release asset
        uses: actions/upload-release-asset@v1
        env: 
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build/windows${{ env.version }}.zip
          asset_name: windows${{ env.version }}.zip
          asset_content_type: application/zip